import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;
import java.sql.*;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;


public class SnakeGame extends JPanel implements ActionListener, KeyListener {

    protected class Tile {
        int x;
        int y;

        Tile(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    int boardWidth;
    int boardHeight;
    int tileSize = 25;
    int totalBlocks;

    //snake
    Tile snakeHead;
    ArrayList<Tile> snakeBody;
    ArrayList<Tile> collisionBlocks;

    //food
    Tile food;
    Tile specialFood; // Decrease length food
    Tile teleportFood; // Teleport food
    Random random;

    //message proceeding to next stage
    private long stageMessageStartTime = 0;
    //food timer
    private long foodStartTime;
    private long foodDuration = 5000;

    //game logic
    int velocityX;
    int velocityY;
    Timer gameLoop;

    //Object
    private Reset reset;

    //score
    int score;
    int foodsEaten; // Keep track of the number of foods eaten
    int stackedTeleports = 0; // Keep track of the number of teleport foods eaten
    int currentStage = 1;//

    boolean gameOver = false;
    boolean gameStarted = false; // Variable to track if the game has started
    boolean gamePaused = true; // Variable to track if the game is paused (initially true)
    boolean keyPressed = false; // Variable to track if a key has been pressed
    boolean justAteFood = false; // Flag to indicate whether the snake just ate food

    private String stageMessage;
    private Timer stageMessageTimer;
    private GameOverListener gameOverListener;

    SnakeGame(int boardWidth, int boardHeight) {
        this.boardWidth = boardWidth;
        this.boardHeight = boardHeight;
        
        setPreferredSize(new Dimension(this.boardWidth, this.boardHeight));
        setBackground(Color.black);
        addKeyListener(this);
        setFocusable(true);

        totalBlocks = (boardWidth / tileSize) * (boardHeight / tileSize);

        snakeHead = new Tile(5, 5);
        snakeBody = new ArrayList<Tile>();

        food = new Tile(10, 10);
        specialFood = new Tile(10, 10);
        teleportFood = new Tile(10, 10); // Initialize teleportFood
        random = new Random();
        placeFood();

        velocityX = 1;
        velocityY = 0;

        //game timer
        gameLoop = new Timer(100, this); //how long it takes to start timer, milliseconds gone between frames
        gameLoop.start();

        //Object
        reset = new Reset();

        setGameSpeed(0); // Set the initial game speed

        // Initialize and scatter collision blocks
        collisionBlocks = new ArrayList<>();
        scatterBlocks();
    }


    private boolean askReadyForStage() {
        int ready = JOptionPane.showConfirmDialog(this, "Are you ready to enter Stage " + currentStage + "?", "Stage " + currentStage, JOptionPane.YES_OPTION);
        return ready == JOptionPane.YES_OPTION;
    }

    private boolean askContinueGame() {
        int ready = JOptionPane.showConfirmDialog(this, "Do you still want to continue your game?", "Continue? ", JOptionPane.YES_NO_OPTION);
        return ready == JOptionPane.YES_NO_OPTION;
    }


    private int getScore() {
        return score;
    }

    // Modify the updateScore method
    private void updateScore() {
        // Increment the score based on the current stage
        switch (currentStage) {
            case 1:
                score += 50;
                break;
            case 2:
                score += 50;
                break;
            case 3:
                score += 50;
                break;
            case 4:
                score += 50;
                break;
        }

        // Increment the number of foods eaten
        foodsEaten++;

        // Check if the score threshold for each stage has been reached
        if (score >= 200 && currentStage == 1) {
            showStageMessage();
            currentStage = 2;
            setGameSpeed(2);
        } else if (score >= 400 && currentStage == 2) {
            showStageMessage();
            currentStage = 3;
            setGameSpeed(3);
            scatterBlocks();
            repaint();
            askReadyForStage();

        } else if (score >= 600 && currentStage == 3) {
            showStageMessage();
            currentStage = 4;
            setGameSpeed(4);
            scatterBlocks();
            repaint();
            askReadyForStage();
        } else if (score >= 1000 && currentStage == 4) {
            // Player wins the game when reaching the final score
            if(!askContinueGame()) {
                gameOver = true;
                gameLoop.stop();
                JOptionPane.showMessageDialog(this, "Congratulations! You won the game! Thank you For Playing!");
            }
        }
    }

    private void showStageMessage() {
        stageMessage = "Stage " + (currentStage) + " completed. Advancing to Stage " + (currentStage+1) + "...";
        stageMessageStartTime = System.currentTimeMillis();
        repaint();
    }

    private void setGameSpeed(int stage) {
        int delay =0 ;
        switch (stage) {
            case 2:
                delay = 95; // Stage 2 speed
                break;
            case 3:
                delay = 75; // Stage 3 speed
                break;
            case 4:
                delay = 50; // Stage 4 speed
                break;
            default:
                delay = 115;
                break;
        }
        gameLoop.setDelay(delay);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);

        FontMetrics fontMetrics = g.getFontMetrics(new Font("Arial", Font.PLAIN, 14));

        if (stageMessage != null && System.currentTimeMillis() - stageMessageStartTime < 3000) {
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.PLAIN, 14));
            g.drawString(stageMessage, (boardWidth - fontMetrics.stringWidth(stageMessage)) / 2, tileSize * 2);
        }
    }

    public void draw(Graphics g) {
        FontMetrics fontMetrics = g.getFontMetrics(new Font("Arial", Font.PLAIN, 16));

        /*Grid Lines
        for(int i = 0; i < boardWidth/tileSize; i++) {
            //(x1, y1, x2, y2)
            g.drawLine(i*tileSize, 0, i*tileSize, boardHeight);
            g.drawLine(0, i*tileSize, boardWidth, i*tileSize);
        }*/

        // Draw the food
        if (food.x >= 0 && food.y >= 0) {
            g.setColor(Color.BLUE);
            g.fill3DRect(food.x*tileSize, food.y*tileSize, tileSize, tileSize, true);
        }

        // Draw the special food
        if (specialFood.x >= 0 && specialFood.y >= 0) {
            g.setColor(Color.RED);
            g.fill3DRect(specialFood.x*tileSize, specialFood.y*tileSize, tileSize, tileSize, true);
        }

        // Draw the teleport food
        if (teleportFood.x >= 0 && teleportFood.y >= 0) {
            g.setColor(Color.MAGENTA);
            g.fill3DRect(teleportFood.x*tileSize, teleportFood.y*tileSize, tileSize, tileSize, true);
        }

        //Snake Head
        g.setColor(Color.GREEN);
        g.fill3DRect(snakeHead.x*tileSize, snakeHead.y*tileSize, tileSize, tileSize, true);

        //Snake Body
        for (int i = 0; i < snakeBody.size(); i++) {
            Tile snakePart = snakeBody.get(i);
            g.fill3DRect(snakePart.x*tileSize, snakePart.y*tileSize, tileSize, tileSize, true);
        }

        // Draw the blocks in the middle
        g.setColor(Color.GREEN);
        for (Tile block : snakeBody) {
            g.fill3DRect(block.x*tileSize, block.y*tileSize, tileSize, tileSize, true);
        }

        // Draw the collision blocks only in stage 3 and stage 4
        if (currentStage >= 3) {
            g.setColor(Color.ORANGE);
            for (Tile block : collisionBlocks) {
                g.fill3DRect(block.x * tileSize, block.y * tileSize, tileSize, tileSize, true);
            }
        }

        // Draw the score, teleport count, and stage information
        String scoreText = "Score: " + getScore() + " | Teleports: " + stackedTeleports + " | Stage: " + currentStage;
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 16));
        g.drawString(scoreText, (boardWidth - fontMetrics.stringWidth(scoreText)) / 2, tileSize);


        // If the game hasn't started, display a message
        if (!gameStarted) {
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 20));
            g.drawString("Press any key to play", (boardWidth / 2) - (tileSize * 4), (boardHeight / 2));
        } else if (gamePaused) {
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 20));
            g.drawString("Game Paused", (boardWidth / 2) - (tileSize * 3), (boardHeight / 2));
        }
    }


    public void placeFood() {
        // Generate a random number between 0 and 99
        int randomNum = random.nextInt(100);

        // Adjust probabilities based on random number
        if (randomNum < 60) { // 60% chance for blue food
            food.x = random.nextInt(boardWidth / tileSize);
            food.y = random.nextInt(boardHeight / tileSize);
            specialFood.x = -1; // Set the special food position outside the board
            specialFood.y = -1;
            teleportFood.x = -1; // Set the teleport food position outside the board
            teleportFood.y = -1;
            foodStartTime = System.currentTimeMillis(); // Set the start time for the regular food
        } else if (randomNum < 90) { // 30% chance for red food
            food.x = -1; // Set the regular food position outside the board
            food.y = -1;
            specialFood.x = random.nextInt(boardWidth / tileSize);
            specialFood.y = random.nextInt(boardHeight / tileSize);
            teleportFood.x = -1; // Set the teleport food position outside the board
            teleportFood.y = -1;
            foodStartTime = System.currentTimeMillis(); // Set the start time for the special food
        } else { // 10% chance for teleport food
            food.x = -1; // Set the regular food position outside the board
            food.y = -1;
            specialFood.x = -1; // Set the special food position outside the board
            specialFood.y = -1;
            teleportFood.x = random.nextInt(boardWidth / tileSize);
            teleportFood.y = random.nextInt(boardHeight / tileSize);
            foodStartTime = System.currentTimeMillis(); // Set the start time for the teleport food
        }
    }

    private void scatterBlocks() {
        Random random = new Random();
        int blocks = 0;
        switch (currentStage) {
            case 3:
                blocks = 10;
                break;
            case 4:
                blocks = 20;
                break;
            // Add cases for other stages if needed
        }
        collisionBlocks.clear(); // Clear the existing collision blocks
        for (int i = 0; i < blocks; i++) { // Scatter blocks based on the current stage
            int blockX = random.nextInt(boardWidth / tileSize); // Random X-coordinate within the frame
            int blockY = random.nextInt(boardHeight / tileSize); // Random Y-coordinate within the frame
            collisionBlocks.add(new Tile(blockX, blockY)); // Add the block to the list
        }
    }


    public void move() {
        // Check if the regular food should disappear
        if (food.x >= 0 && food.y >= 0 && System.currentTimeMillis() - foodStartTime >= foodDuration) {
            placeFood(); // Place a new food in a random location
        }

        // Check if the special food should disappear
        if (specialFood.x >= 0 && specialFood.y >= 0 && System.currentTimeMillis() - foodStartTime >= foodDuration) {
            placeFood(); // Place a new food in a random location
        }

        // Eat food and special food
        if (food.x >= 0 && food.y >= 0 && collision(snakeHead, food)) {
            snakeBody.add(new Tile(food.x, food.y)); // Add a new tile to the snake body
            snakeBody.add(0, new Tile(snakeHead.x, snakeHead.y));
            snakeBody.add(1, new Tile(snakeHead.x, snakeHead.y));// Add the snake head to the front of the body
            updateScore();
            placeFood(); // Place a new food in a random location
            justAteFood = true; // Set the flag to true since the snake just ate food
        } else if (specialFood.x >= 0 && specialFood.y >= 0 && collision(snakeHead, specialFood)) {
            // Eat the special food
            if (snakeBody.size() > 0) {
                snakeBody.remove(snakeBody.size() - 1);
            }
            updateScore();
            placeFood(); // Place a new food in a random location
            justAteFood = true; // Set the flag to true since the snake just ate food
        } else {
            justAteFood = false; // Reset the flag if the snake didn't eat food in this move
        }

        // Eat teleport food
        if (teleportFood.x >= 0 && teleportFood.y >= 0 && collision(snakeHead, teleportFood)) {
            // Increment the stacked teleports
            stackedTeleports++; // Increment the number of teleport foods eaten
            updateScore();

            // Start the timer for the teleport food
            foodStartTime = System.currentTimeMillis();

            // Place a new teleport food in a random location
            placeFood();
            repaint(); // Update the display after eating teleport food
        }

        // Check for collision with the snake's own body
        if (!justAteFood) { // Check for head collision only if the snake didn't just eat food
            for (int i = 1; i < snakeBody.size(); i++) {
                if (collision(snakeHead, snakeBody.get(i))) {
                    gameOver = true; // Trigger game over if collision with the snake's own body occurs
                    return; // Exit the method early
                }
            }
        }

        // Update the display after eating teleport food
        repaint();

        //move snake body
        for (int i = snakeBody.size()-1; i >= 0; i--) {
            Tile snakePart = snakeBody.get(i);
            if (i == 0) { //right before the head
                snakePart.x = snakeHead.x;
                snakePart.y = snakeHead.y;
            }
            else {
                Tile prevSnakePart = snakeBody.get(i-1);
                snakePart.x = prevSnakePart.x;
                snakePart.y = prevSnakePart.y;
            }
        }
        //move snake head
        snakeHead.x += velocityX;
        snakeHead.y += velocityY;

        // Check if the snake head collided with the blocks
        for (Tile block : collisionBlocks) {
            if (collision(snakeHead, block)) {
                gameOver = true; // Trigger game over if collision with a block occurs
                return; // Exit the method early
            }
        }

        // Check if the snake head collided with the border and Wrap around the screen if the snake head reaches the border if has stackTeleport then teleport
        if (snakeHead.x < 0 || snakeHead.x >= boardWidth / tileSize || snakeHead.y < 0 || snakeHead.y >= boardHeight / tileSize) {
            if (stackedTeleports > 0) {
                wrapAroundScreen();
                stackedTeleports--;
            } else {
                gameOver = true;
            }
        }
        // Update the display
        repaint();
    }


    private void wrapAroundScreen() {
        // Check if the snake head collided with the left or right border
        if (snakeHead.x < 0) {
            snakeHead.x = (boardWidth / tileSize) - 1; // Teleport to the right border
        } else if (snakeHead.x >= boardWidth / tileSize) {
            snakeHead.x = 0; // Teleport to the left border
        }

        // Check if the snake head collided with the top or bottom border
        if (snakeHead.y < 0) {
            snakeHead.y = (boardHeight / tileSize) - 1; // Teleport to the bottom border
        } else if (snakeHead.y >= boardHeight / tileSize) {
            snakeHead.y = 0; // Teleport to the top border
        }
    }

    public boolean collision(Tile tile1, Tile tile2) {
        return tile1.x == tile2.x && tile1.y == tile2.y;
    }

    @Override
public void actionPerformed(ActionEvent e) {
     if (gameStarted && keyPressed) {
        move();
    }
    repaint();
    if (gameOver) {
        boolean won = false;
        if (gameOverListener != null) {
            won = snakeBody.size() + 1 == totalBlocks;
            gameOverListener.gameOver(won);
        }
        // Check if the player wants to play again
        int input;
        if (won)
            input = JOptionPane.showConfirmDialog(null, "Congratulations! You won the game!", "Game Over", JOptionPane.YES_NO_OPTION);
        else if (score < 1000)
            input = JOptionPane.showConfirmDialog(null, "You lose! You want to play again?", "Game Over", JOptionPane.YES_NO_OPTION);
        else
            input = JOptionPane.showConfirmDialog(null, "Thank you for playing! Do You want to play again?", "Congratulations", JOptionPane.YES_NO_OPTION);

        if (input == JOptionPane.YES_OPTION) {
            resetAll();
        } else {
            if (input == JOptionPane.YES_OPTION) {
                resetAll();
            } else {
                // Insert the score into the database
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/oop_finalproject", "root", "")) {
                    String selectQuery = "SELECT username FROM login WHERE username"; // Replace <condition> with the appropriate condition to select the correct username

                    PreparedStatement selectStmt = conn.prepareStatement(selectQuery);
                    ResultSet rs = selectStmt.executeQuery();

                    String insertQuery = "UPDATE `login` SET score='" + score + "'";
                    PreparedStatement stmt = conn.prepareStatement(insertQuery);
                    stmt.setInt(2, score);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Score inserted into the database.");
                    } else {
                        System.out.println("Failed to insert score into the database.");
                    }
                } catch (SQLException ex) {
                    System.out.println("An error occurred while inserting score into the database: " + ex.getMessage());
                }

                gameLoop.stop(); // Stop the game loop
                Dashboard dash = new Dashboard();
                dash.setVisible(true);
                App app = new App();
                app.dispose();
            }
        }
    }
}



    @Override
    public void keyPressed(KeyEvent e) {
        if (!gameStarted) {
            gameStarted = true; // Start the game when any key is pressed
            keyPressed = true; // Set keyPressed to true
            gameLoop.start(); // Start the game loop
            gamePaused = false; // Unpause the game when a key is pressed
        } else if (gamePaused) {
            gamePaused = false; // Unpause the game when a key is pressed
        }
        // System.out.println("KeyEvent: " + e.getKeyCode());
        if (e.getKeyCode() == KeyEvent.VK_UP && velocityY != 1) {
            velocityX = 0;
            velocityY = -1;
        } else if (e.getKeyCode() == KeyEvent.VK_DOWN && velocityY != -1) {
            velocityX = 0;
            velocityY = 1;
        } else if (e.getKeyCode() == KeyEvent.VK_LEFT && velocityX != 1) {
            velocityX = -1;
            velocityY = 0;
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT && velocityX != -1) {
            velocityX = 1;
            velocityY = 0;
        }
    }

    private void resetAll() {
        // Reset game state
        reset.resetAll(); // Reset score, foodsEaten, stackedTeleports, and currentStage using ScoreManager methods
        score = reset.getScore(); // Update score from ScoreManager
        foodsEaten = reset.getFoodsEaten(); // Update foodsEaten from ScoreManager
        stackedTeleports = reset.getStackedTeleports(); // Update stackedTeleports from ScoreManager
        currentStage = reset.getCurrentStage(); // Update currentStage from ScoreManager

        gameOver = false;
        snakeBody.clear();
        snakeHead = new Tile(5, 5); // Reset snake head position
        velocityX = 1; // Reset velocity to move right
        velocityY = 0;
        placeFood(); // Place the food again
        setGameSpeed(0); // Reset the game speed

        // Remove collision blocks
        collisionBlocks.clear();
    }

    public void addGameOverListener(GameOverListener listener) {
        gameOverListener = listener;
    }

    //not needed
    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyReleased(KeyEvent e) {}

}
